// MicrosoftOAuth2.cpp
#include "MicrosoftOAuth2.h"
#include "OAuth2Base.h"
#include "Microsoft_secrets.h"
#include "qdesktopservices.h"
#include <QUrlQuery>

MicrosoftOAuth2::MicrosoftOAuth2(QObject* parent) : OAuth2Base(parent)
{
    this->microsoft = new QOAuth2AuthorizationCodeFlow(this);

    //Parse json to get authorization parameters
    QUrl authUri = Microsoft_secrets::auth_uri;
    QString clientId = Microsoft_secrets::client_id;
    QUrl tokenUri = Microsoft_secrets::token_uri;
    QUrl redirectUri = Microsoft_secrets::redirect_uris;
    quint16 port = Microsoft_secrets::port; // Get the port

    //required values for authorization code request
    this->microsoft->setClientIdentifier(clientId);
    this->microsoft->setScope("User.Read Team.ReadBasic.All Channel.ReadBasic.All Files.ReadWrite.All");
    this->microsoft->setAuthorizationUrl(authUri);

    //additional required values for access token request
    this->microsoft->setAccessTokenUrl(tokenUri);

    /*
    Sets the parameter-modification function modifyParametersFunction.
    This function is used to customize the parameters sent to the server during a specified authorization stage.
    */
    this->microsoft->setModifyParametersFunction([](QAbstractOAuth::Stage stage, QMultiMap<QString, QVariant> * parameters) {
        // Percent-decode the "code" parameter
        if (stage == QAbstractOAuth::Stage::RequestingAccessToken) {
            //qDebug() << "requesting access token";
            QByteArray code = parameters->value("code").toByteArray();
            parameters->replace("code", QUrl::fromPercentEncoding(code));
        }
        if (stage == QAbstractOAuth::Stage::RequestingAuthorization){
            //qDebug() << "requesting autorization code";
        }
    });

    /*
    Setting reply handler
    */
    this->replyHandler = new QOAuthHttpServerReplyHandler(port, this);
    this->microsoft->setReplyHandler(replyHandler);

    /*
    authorizeWithBrowser: signal emitted when the url generated by resourceOwnerAuthorization() is ready to be used in the web browser
    resourceOwnerAuthorization(): builds the resource owner authorization URL to be used in the browser, from the values
    set above (client id, scope, authorization url).
    */
    connect(this->microsoft, &QOAuth2AuthorizationCodeFlow::authorizeWithBrowser, &QDesktopServices::openUrl);

    connect(this->microsoft, &QOAuth2AuthorizationCodeFlow::granted, [this](){
        qDebug() << "token received";
        emit loggedIn();
        qDebug() <<"Microsoft token: " <<this->microsoft->token();
    });
}

void MicrosoftOAuth2::authenticate() {
    // Construct the authorization URL
    QUrl authUrl(Microsoft_secrets::auth_uri);

    QUrlQuery urlQuery;
    urlQuery.addQueryItem("client_id", Microsoft_secrets::client_id);
    urlQuery.addQueryItem("redirect_uri", Microsoft_secrets::redirect_uris);
    urlQuery.addQueryItem("response_type", "code");
    urlQuery.addQueryItem("scope", "User.Read Team.ReadBasic.All Channel.ReadBasic.All Files.ReadWrite.All");

    authUrl.setQuery(urlQuery.query());

    // Open the default web browser for user authentication
    emit authorizeWithBrowser(authUrl);
}


void MicrosoftOAuth2::handleCallback(const QUrl& callbackUrl) {
    // Extract code from the callback URL
    QString code = QUrlQuery(callbackUrl).queryItemValue("code");

    if (!code.isEmpty()) {
        // Perform token exchange logic using the obtained code
        // ...

        // Once the token exchange is complete, emit signals accordingly
        emit authenticationSuccess();
    } else {
        emit authenticationError("Failed to obtain authorization code");
    }
}

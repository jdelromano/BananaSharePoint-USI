#ifndef ABSTRACTAUTHENTICATOR_H
#define ABSTRACTAUTHENTICATOR_H

#include "helperstructures.h"
#include "qapplication.h"
#include "qdebug.h"
#include "qjsondocument.h"
#include "qjsonobject.h"
#include "qoauth2authorizationcodeflow.h"
#include "qoauthhttpserverreplyhandler.h"
#include "qoauthoobreplyhandler.h"
#include "qdesktopservices.h"
#include "QFile"
#include <QObject>

class AbstractAuthenticator : public QObject
{
    Q_OBJECT
public:
    explicit AbstractAuthenticator(QObject *parent = nullptr, bool secret = false){
        this->microsoft = new QOAuth2AuthorizationCodeFlow(this);

        QString current_path = QApplication::applicationDirPath();
        QString params_path;
        if(secret){
            params_path = current_path + "/../../TextEditor/params_google.json";
        }
        else{
            params_path = current_path + "/../../TextEditor/params.json";
        }
        QFile file(params_path);
        QJsonDocument document;
        file.open(QIODeviceBase::ReadOnly);
        if(file.isOpen())
        {
            QByteArray json_bytes = file.readAll();
            document = QJsonDocument::fromJson(json_bytes);
            file.close();
        }

               //Parse json to get authorization parameters
        QJsonObject obj = document.object();
        QUrl authUri = obj["auth_uri"].toString();
        QString clientId = obj["client_id"].toString();
        QUrl tokenUri = obj["token_uri"].toString();
        QUrl redirectUri = obj["redirect_uri"].toString();
        quint16 port = static_cast<quint16>(redirectUri.port()); // Get the port
        QString clientSecret;
        if (secret){
            clientSecret = obj["client_secret"].toString();
        }

               //required values for authorization code request
        this->microsoft->setClientIdentifier(clientId);
        this->microsoft->setAuthorizationUrl(authUri);
        if (secret){
            this->microsoft->setScope("https://mail.google.com/ https://www.googleapis.com/auth/drive");
            this->microsoft->setClientIdentifierSharedKey(clientSecret);
        }
        else{
            this->microsoft->setScope("User.Read Team.ReadBasic.All Channel.ReadBasic.All Files.ReadWrite.All");
        }

               //additional required values for access token request
        this->microsoft->setAccessTokenUrl(tokenUri);

        /*
        Sets the parameter-modification function modifyParametersFunction.
        This function is used to customize the parameters sent to the server during a specified authorization stage.
        */
        this->microsoft->setModifyParametersFunction([](QAbstractOAuth::Stage stage, QMultiMap<QString, QVariant> * parameters) {
            // Percent-decode the "code" parameter
            if (stage == QAbstractOAuth::Stage::RequestingAccessToken) {
                //qDebug() << "requesting access token";
                QByteArray code = parameters->value("code").toByteArray();
                parameters->replace("code", QUrl::fromPercentEncoding(code));
            }
            if (stage == QAbstractOAuth::Stage::RequestingAuthorization){
                //qDebug() << "requesting autorization code";
            }
        });

        /*
        Setting reply handler
        */
        this->replyHandler = new QOAuthHttpServerReplyHandler(port, this);
        this->microsoft->setReplyHandler(replyHandler);

        /*
        authorizeWithBrowser: signal emitted when the url generated by resourceOwnerAuthorization() is ready to be used in the web browser
        resourceOwnerAuthorization(): builds the resource owner authorization URL to be used in the browser, from the values
        set above (client id, scope, authorization url).
        */
        connect(this->microsoft, &QOAuth2AuthorizationCodeFlow::authorizeWithBrowser, &QDesktopServices::openUrl);

        connect(this->microsoft, &QOAuth2AuthorizationCodeFlow::granted, [this](){
            qDebug() << "token received";
            emit loggedIn();
        });
    }

    QString files_path;
    QOAuth2AuthorizationCodeFlow * microsoft;
    QOAuthOobReplyHandler * replyHandler;

    virtual void startLogin() {
        this->microsoft->grant();
    }

    virtual void getTeamsList() = 0;
    virtual void getFileContent(QString site_id, QString item_id, QString file_name, bool open) = 0;
    virtual void updateFileContent(QByteArray new_text, struct openFile * current_open_file) = 0;
    virtual void checkVersion(QString site_id, QString item_id, QString version) = 0;

signals:
    void teamsListReceived(QList<QPair<QString, QString> > list_id_name);
    void channelsListReceived(QMap<QString, QString> channels, QString team_id);
    void getChannels(QString id);
    void loggedIn();
    void fileContentReceived(QString file_name, QByteArray fileContent, QString site_id, QString item_id, QString version, bool open);
    void filesListReceived(QList<fileInfos> list_file_infos);
    void googleFilesListReceived(QList<fileInfos> list_file_infos);
    void versionChecked(bool res);
    void openFile(QString fileName, QString site_id, QString item_id, QString version);
};

#endif // ABSTRACTAUTHENTICATOR_H
